.TH tworld2 6 "Mar 2014" "Tile World"
.LO 1
.SH NAME
tworld2 \- Tile World 2
.P
.br
.SH SYNOPSIS
Tile World is a reimplementation of the game "Chip's Challenge". The
player controls Chip, navigating him through his challenges. The
object of each level of the game is to find and reach the exit tile,
which takes you to the next level. The levels contain many different
kinds of obstacles, creatures both hostile and indifferent, tools,
protective gear -- and, of course, chips.
.br
.SH OVERVIEW OF THE GAME
The main display shows Chip in the current level and his immediate
surroundings. To the right of this display is shown the basic
information about the current level. The most important data shown
here are how many seconds are left on the clock, and how many chips
still need to be collected. (On some level the clock does not show a
time. These levels have no time limit.)
.P
The object of every level is to find and reach the exit before the
time runs out. The exit is frequently (but not always) guarded by a
chip socket. To move past the chip socket, Chip must collect a certain
number of computer chips; the amount needed is different in each
level. As you play a level, the information display on the right shows
the number of chips that still need to be collected in order to open
the socket. (Remember that getting enough chips to open the chip
socket is only a subgoal, not the main goal. Some levels do not
require any chips to be collected; some levels have no chip socket at
all.)
.P
Also occupying many of the levels are other creatures. Most (but not
all) of them move about in simple, predictable patterns, and without
regard for Chip's presence. The creatures know enough to avoid running
into each other, but a collision with Chip is fatal. The complete
taxonomy of creatures is: tanks, balls, gliders, fireballs, walkers,
blobs, teeth, bugs, and paramecia.
.P
In addition to the socket and the main exit, there are also four
different kinds of doors. These doors can be opened with the right
kind of key. The doors and the keys are color-coded -- red, green,
blue, and yellow -- so you can tell them apart. Like the chip socket,
a door that has been opened stays open. Keys are picked up simply by
stepping upon them. The key disappears from the map and appears in
your possession. Keys in your possession are displayed on the
right-hand side of the window.
.P
Besides keys and chip, there are also four kinds of special footgear
that Chip can collect. Like keys, boots can be picked up simply by
walking over them. (There is no limit to the number of boots you can
have.) These boots permit Chip to walk across four different kinds of
surfaces, just as if they were normal flooring. Fire and water are two
kind of tiles that are normally fatal to Chip, but fire boots and
water boots will permit safe passage across these. Stepping onto ice
sends Chip sliding at high speed unless he has a pair of ice boots.
Finally, there are force floors that push Chip along in a specific
direction; these can be counteracted with force boots.
.P
Two other types of surfaces are more useful to Chip, in that they keep
other creatures out. These are dirt and gravel, and they are special
in that Chip is the only one who can walk on them. However, when Chip
steps onto a dirt tile, it is cleared away and becomes normal
flooring. Gravel, on the other hand, is permanent.
.P
There are numerous other objects scattered around the various levels,
which Chip can interact with, although he cannot pick them up. Bombs
are one kind of object which should always be avoided, as they explode
when stepped on. The thief tile should also generally be avoided;
entering this tile will cause Chip to lose any footgear he has
collected.
.P
Dirt blocks are large, movable squares of dirt. Chip can push them
about, and use them to wall off areas or to safely detontate bombs.
Furthermore, if a block is pushed into water, the tile will turn into
dirt (which will become normal flooring when Chip steps on it).
Finally, note that blocks can sometimes be resting on top of other
objects, both helpful (such as a key) and harmful (such as a bomb).
.P
Some levels have teleports. Entering a teleport causes Chip to vanish
and instantaneously reappear at another teleport.
.P
Even some of the walls can demonstrate surprising behavior. The
so-called blue walls can either be actual walls, or empty mirages.
The only way for Chip to tell which is which is to attempt to walk
through one. There are also popup walls -- Chip can walk across these
only once, for they turn into walls as he walks over them.
.P
There are four different types of pushbuttons. Like keys and boots,
they are color-coded. Stepping on a pushbutton activates it.
.P
The green buttons control the toggle walls. Toggle walls have dotted
green outlines, and they change between being open (passable, like any
other floor) and open (unpassable, a wall). When a green button is
pressed, the closed toggle walls are opened and the open toggle walls
are closed.
.P
Brown buttons control bear traps. Anything that wanders into a bear
trap will be stuck there until the brown button connected to it is
pushed.
.P
Blue buttons exercise some control over the tanks. Normally, a tank
moves directly forward until it hits an obstacle, whereupon it stops.
But when a blue button is pressed, all tanks turn around 180 degrees
and begin moving again.
.P
The objects with the most potential for help and hindrance are the
clone machines, which are controlled by red buttons. Every clone
machine contains a dirt block, a tank, or some other creature. When
the clone machine's red button is pressed, a duplicate of whatever the
clone machine contains is created and set loose.
.P
Once in a while there will also be hint buttons. These have a question
mark displayed on them. When Chip steps onto a hint button, a short
bit of information will be displayed in the lower right-hand area of
the window.
.P
Here are some general hints for successful play:
.P
.TP 2
.PD 0
*
When moving dirt blocks around, take care not to shove them into
corners where you can't get them out again.
.TP
*
On some of the more mazelike levels, you may need to sketch out a map
in order to solve it.
.TP
*
Many of the creatures move in specific patterns (for example, as with
the tanks mentioned above).
.TP
*
A number of the objects in the game will affect other creatures in the
same way they affect Chip.
.TP
*
Remember that if you get trapped somewhere, you can always use
Ctrl-R to restart a level.
.TP
*
When you find a level to be unusually difficult, take some time to
examine it carefully. Make sure you truly know what options are
available to you. In any case, keep trying. Occasionally the game will
give you the opportunity to skip a level that seems too hard.
.PD 1
.br
.SH PASSWORDS
Every level has a four-letter password. The password for a level is
shown in the information display at the upper-right of the window. The
obstensible purpose of passwords is to allow you to come back to a
level. Howver, normally you will never need to remember passwords, as
Tile World will automatically store the passwords for you. However, if
you somehow manage to learn the password of a level that you have yet
to achieve, you can use the password to gain early access to that
level.
.br
.SH SCORING
For each level in a set that you complete, the game awards 500 points
times the level's number. Furthermore, if the level is timed, an extra
10 points is added for every second left on the clock when you finish
the level. You can thus sometimes improve your score by returning to
already-completed levels and playing them again.
.br
.SH KEY COMMANDS
During game play, the arrows are the most important keys; they move
Chip through the level. The keys 2 4 6 8 on the numeric keypad
can also be used for the same purpose. Other keys have the following
functions:
.P
.TP
.B Bkspc
pauses the game; press any key to resume play.
.TP
.B Ctrl-N
stops the current game and moves forward to the next level.
.TP
.B Ctrl-P
stops the current game and moves back to the previous level.
.TP
.B Esc
quits the current level.
.TP
.B Ctrl-R
starts over at the beginning of the current level. 
.TP
.B V
decreases the volume level. (If the volume level is reduced to zero,
then the program will display sound effects textually, as onomatopoeia.)
.TP
.B Shift-V
increases the volume level.
.P
At the start of a level, before game play begins, the following key
commands are available:
.P
.TP
.B Esc
returns to the list of available level sets.
.TP
.B Spc
starts the current level without moving (i.e., standing still).
.TP
.B N
moves to the next level.
.TP
.B P
moves to the previous level.
.TP
.B PgUp
moves ahead ten levels.
.TP
.B PgDn
moves back ten levels.
.TP
.B G
displays a prompt and accepts a password, then jumps to the level with
that password.
.TP
.B Tab
plays back the best solution for that level.
.TP
.B Shift-Tab
verifies the best solution for that level. If the solution is no
longer valid (e.g. because the level has been altered), the solution
will automatically be deprecated.
.TP
.B O
toggles between even-step and odd-step offset.
.TP
.B Shift-O
(Lynx-mode only) increments the stepping offset by one.
.TP
.B F
(Lynx-mode only) changes the initial direction for the "random" force floors.
.TP
.B Ctrl-X
deprecates the best solution for that level. If the level is then
succesfully completed again, the saved solution will be replaced with
the new one, whether or not it had a better time.
.TP
.B Shift-Ctrl-X
deletes the saved solution for that level. If confirmed, the
solution will be immediately removed from the solution file.
.TP
.B S
displays the list of known levels and the score for each, as well as
the overall score for the level set. The score list display also
permits changing the current level by moving the selection and
pressing Enter.
.TP
.B Ctrl-S
displays the list of solution files in the save directory whose
names start with the name of the current level set. From here a
different solution file can be selected.
.P
At every point in the program, the Esc key will abort the current
activity and return to the previous display.
.br
.SH RULESETS
Tile World contains emulators for two different versions of "Chip's
Challenge". They are referred to as the Lynx ruleset and the MS
ruleset. The Lynx ruleset recreates the original implementation of the
game, and the MS ruleset recreates the version that was implemented
for Microsoft Windows (cf
.BR "HISTORY" ).
.P
The most notable difference between the two rulesets is that in the MS
ruleset, movement between tiles is instantaneous, whereas under the
Lynx ruleset motion occurs across several "ticks". (This probably
reflects the fact that the latter ran on dedicated hardware, while the
former ran on 33 MHz PCs under a non-preemptive multitasking OS.)
Although the basic mechanics of the game are the same under both
rulesets, there are also a host of subtle differences between the two.
.P
Each level set file includes a flag that indicates which ruleset it is
to be played under. Some level sets can be played under both rulesets
(most notably, the original set of levels), but this is the exception.
.br
.SH ADDING NEW LEVEL SETS
Level sets are defined by data files. By convention these file are
named with a .dat or .ccl extension. Classically, the name proper
contains the author's first name, last initial, and a single digit --
for example, a set by someone named Bob Nomo could be called
BobN1.dat. (The digit is used to give the sequence in case the author,
for whatever reason, stores their creations in more than one file.)
Some more recent level sets do not follow this naming pattern,
however, so it is not always easy to find out the author from the
set's name.
.P
When a new data file is obtained, it may simply be copied into the
level set directory (cf
.BR "DIRECTORIES" ),
and Tile World will then make
it available for playing.
.P
An alternate method is to use a configuration file (see
.B CONFIGURATION FILES
below).
.br
.SH COMMAND-LINE OPTIONS
tworld2 is normally invoked without arguments. The program begins by
displaying a list of the available level sets. After a level set is
chosen, the program jumps (if possible) to the last level played in
that set.
.P
The available command-line options are enumerated in the following
table.
.P
.TP
.B -a
Double the size of the audio buffer. This option can be repeated, so
for example -aaa would increase the audio buffer size eightfold.
.TP
.B -b
Do a batch-mode verification of the existing solutions and exit.
Levels with invalid solutions are displayed on standard output. If
used with -q, then nothing is displayed, and the program's exit code
is the number of invalid solutions. Can also be used with -s or -t
to have solutions verified before the other option is applied. Note
that this options requires a level set file and/or a solution file be
named on the command line.
.TP
.BI "-D\ " DIR
Read level data files from
.I DIR
instead of the default directory.
.TP
.B -d
Display the default directories used by the program on standard
output, and exit.
.TP
.B -F
Run in full-screen mode.
.TP
.B -H
Upon exit, display a histogram of idle time on standard output. (This
option is used for evaluating optimization efforts.)
.TP
.B -h
Display a summary of the command-line syntax on standard output and
exit.
.TP
.BI "-L\ " DIR
Look for level sets in
.I DIR
instead of the default directory.
.TP
.B -l
Write a list of available level sets to standard output and exit.
.TP
.BI "-n\ " N
Set the initial volume level to
.IR "N" ,
0 being silence and 10 being
full volume.
.TP
.B -P
Turn on pedantic mode, forcing the Lynx ruleset to emulate the
original game as closely as possible. (See the Tile World website for
more information on emulation of the Lynx ruleset.)
.TP
.B -p
Turn off all password-checking. This option allows the normal sequence
of levels to be bypassed.
.TP
.B -q
Run quietly. All sounds, including the ringing of the terminal bell,
are suppressed.
.TP
.B -r
Run in read-only mode. This guarantees that no changes will be made
to the solution files.
.TP
.BI "-R\ " DIR
Read resource data from
.I DIR
instead of the default directory.
.TP
.BI "-S\ " DIR
Read and write solution files (and other saved data) under
.I DIR
instead of the default
directory.
.TP
.B -s
Display the current scores for the selected level set on standard
output and exit. A level set must be named on the command line. If
used with -b, the solutions are verified beforehand, and invalid
solutions are indicated.
.TP
.B -t
Display the best times for the selected level set on standard output
and exit. A level set must be named on the command line. If used with
-b, the solutions are verified beforehand, and invalid solutions are
indicated.
.TP
.B -V
Display the program's version and license information on standard
output and exit.
.TP
.B -v
Display the program's version number on standard output and exit.
.P
Besides the above options, tworld2 can accept up to three
command-line arguments: the name of a level set, the number of a level
to start on, and the name of an alternate solution file. If the name
of an installed level set is specified, then Tile World will start up
in that set, skipping the initial level set selection.
.P
If the specified level set is not a simple name but is a pathname
(relative or absolute), then Tile World will use that level set only,
without requiring that it first be installed. No solutions will be
saved unless an explicit solution file is also supplied on the
command-line. (If the command-line only specifies a solution file,
then Tile World will look up the name of the level set in the solution
file.)
.br
.SH CONFIGURATION FILES
Configuration files are used to override some of the settings in a
data file, or to set values not provided for by the data file format.
Configuration files are by convention named with a .dac extension. A
configuration file is stored in the level set directory in the place
of the data file, which then goes into the data directory (cf
.BR "DIRECTORIES" ).
.P
The configuration file is a simple text file. The first line of a
configuration file
.I must
have the following form:
.P
file =
.I DATAFILE
.P
where
.I DATAFILE
is the filename of the data file. (Arbitrary
whitespace is permitted around the equal sign, but there cannot be any
whitespace embedded at the beginning of the line.) After this initial
line, the configuration file can contain any of the following lines:
.P
usepasswords =
.I y|n
.P
This line permits password-checking to be enabled/disabled when
playing the levels in the set. The default is y.
.P
ruleset =
.I ms|lynx
.P
This line allows the configuration file to override the ruleset
setting in the data file. This is mainly useful in the case where one
level set is playable under either ruleset (as is the case with the
original level set). The author can then provide one data file and two
configuration files to make both versions available.
.P
lastlevel =
.I levelnum
.P
This line marks an arbitrary level as being the last level in the
set. The game will stop when this level is completed, instead of
proceeding to the next level. (Note that if the data file contains any
levels beyond this one, they will only be reachable via a password.)
.P
fixlynx =
.I y|n
.P
This line is specifically for use with the original level set. It is
not generally useful, and is described here only for completeness. The
chips.dat file that MS distributed with their version of "Chip's
Challenge" contained a few minor differences from the original level
set as appeared on the Lynx. A positive value for this entry instructs
the program to undo those changes, so that the original Lynx level set
is obtained. (The changes made in the MS version were: an extra level
was added; four passwords were garbled; and four or five levels' maps
had minor alterations.)
.br
.SH CCX FILES
The data directory may contain a file with the same name as a level
set, but with a .ccx extension. This file can be used to specify
various data, such as ruleset compatibility and authorship (both for
the entire set and for individual levels. It is also possible to
specify text displayed when reaching or completing levels. This can be
used to give an ongoing story for a level set, or for other
purposes. Detailed documentation does not currently exist. One way to
produce a CCX file for a set is to emulate the structure of an
existing one (such as that for CCLP1 or CCLP3). You can also use the
"CCX File Editor" by Mike Lask.
.P
Some people may wish not to view text associated with levels. This can
be controlled using the "Auto-display Level Text" menu under
"Options". Whether or not this option is enabled, level text can be
viewed using the "View Prologue" (for text displayed when visiting a
level) and "View Epilogue" (for text displayed when completing a
level). The epilogue is only available for levels that have been
completed.
.br
.SH RESOURCES
Tile World loads various resources at runtime from its resource
directory (cf
.BR "DIRECTORIES" ).
These resources include the program's
font, graphic images, and sound effects. The actual file names are
determined by the contents of a file named rc (short for "resource
configuration", not "runtime commands") in the same directory.
.P
The rc file is a plain text file, and contains lines of the
form
.P
.I resource
=
.I filename
.P
where
.I resource
is a symbolic resource name, and
.I filename
is the
name of a file in the resource directory.
.P
The resources can be set differently depending on the ruleset that the
program is using. A line in the rc file of the form
.P
[
.IR "ruleset" ]
.P
indicates that the lines that follow only apply when that ruleset is
in effect (where
.I ruleset
is either MS or Lynx). Resources that
are defined before any such line apply to both rulesets, and are also
used as fallbacks if a ruleset-specific resource could not be
loaded. (The font and the text-color resources also need to have
ruleset-independent values, as these are needed when displaying the
initial file list, before a ruleset has been chosen.)
.P
A line of the form
.P
TileImages =
.I FILENAME
.P
identifies the file that provides the images used to draw the game.
These images are stored in a Windows bitmap. (See the Tile World
website for more information about this resource.)
.P
A line of the form
.P
Font =
.I FILENAME
.P
identifies the file that provides the program's font. The font is
stored as a Windows bitmap. (See the Tile World website for more
information about this resource.)
.P
A line of the form
.P
UnsolvableList =
.I FILENAME
.P
identifies the filename for the database of unsolvable levels. See
.B DATABASE OF UNSOLVABLE LEVELS
below for more information about this
file. Note that this resource must be defined independent of the
ruleset, or else it will be ignored.
.P
A line of the form
.P
EndMessages =
.I FILENAME
.P
identifies the filename for the messages displayed when losing or
winning a level. See
.B END OF LEVEL MESSAGES
below for more information about this file. Note that this resource
must be defined independent of the ruleset, or else it will be
ignored.
.P
Four resources define the colors used in rendering text:
.P
BackgroundColor =
.I RRGGBB
.br
TextColor =
.I RRGGBB
.br
BoldTextColor =
.I RRGGBB
.br
DimTextColor =
.I RRGGBB
.P
The value of
.I RRGGBB
is a string of six hexadecimal digits defining
the red, green, and blue values of the color (as with the color
specification used in HTML or X Windows, but without the preceding
octothorpe).
.P
The remaining resources all define the game's sound effects. The
sounds are stored as Microsoft RIFF files (so-called wave files).
Unlike the tile images, each sound effect is defined as a separate
file. The complete list of symbolic resource names is as follows:
.P
Sounds used in both rulesets
.TP 2
.PD 0
*
LevelCompleteSound
.TP
*
ChipDeathSound
.TP
*
BlockedMoveSound
.TP
*
PickupToolSound
.TP
*
ThiefSound
.TP
*
TeleportSound
.TP
*
OpenDoorSound
.TP
*
SocketSound
.TP
*
SwitchSound
.TP
*
BombSound
.TP
*
SplashSound
.PD 1
.P
Sounds used only under the MS ruleset
.TP 2
.PD 0
*
TickSound
.TP
*
ChipDeathByTimeSound
.TP
*
PickupChipSound
.PD 1
.P
Sounds used only under the Lynx ruleset
.TP 2
.PD 0
*
TileEmptiedSound
.TP
*
WallCreatedSound
.TP
*
TrapEnteredSound
.TP
*
BlockMovingSound
.TP
*
SkatingForwardSound
.TP
*
SkatingTurnSound
.TP
*
SlidingSound
.TP
*
SlideWalkingSound
.TP
*
IceWalkingSound
.TP
*
WaterWalkingSound
.TP
*
FireWalkingSound
.PD 1
.P
(Note that the symbolic names for the shared and MS-only sounds match
the names in the entpack.ini file used by the Microsoft program.
This makes it easy for someone with a copy of Microsoft's "Chip's
Challenge" to use the sound effects that were provided with that
version of the game.)
.br
.SH DATABASE OF UNSOLVABLE LEVELS
Of the many thousands of user-created levels that are publicly
available, there are some that are not possible to complete. Some of
these are intentionally so (e.g. requiring the player to deduce the
password to the next level). The remainder, however, are simply due to
poor design, and there is typically no indication that attempting to
solve these levels is fruitless.
.P
To help alleviate this, Tile World comes with a database of levels
that have been identified by the community to be definitely
unsolvable. When the player visits a level that appears in this
database, a warning is displayed, and the password to the next level
is automatically supplied.
.P
The main database of unsolvable levels is stored in the resource
directory. In addition, a player can keep a separate database in a
file of the same name in the directory for solution files. If present,
Tile World will use the information from both of these files.
.P
The offending levels are identified by content as well as by name and
number, so that updated versions will no longer be identified as
unsolvable. See the Tile World website for more information about the
format of this file, and to check for updates to the database.
.br
.SH END OF LEVEL MESSAGES
When you win or lose a level, Tile World displays a message. These
messages can be customized using a file in the resource directory,
whose default name is messages.txt. This file can contain an umlimited
number of messages for Tile World to choose from. The file consists of
sections of the form
.P
:
.IR messagetypes
.br 
.IR message
.br
.IR message
.P
Here,
.IR messagetypes
can contain any of "die" (for when the player dies), "time" (for when
the player runs out of time), or "win" (for when the player completes
the level. It is possible to specify more than one type. For example,
the file
.P
:die time
.br 
Message 1
.br
Message 2
:die
Message 3
:win
Message 4
.P
specifies that either "Message 1" or "Message 2" can be displayed when
the player dies or runs out of time, "Message 3" can only be displayed
upon death, and "Message 4" can only be displayed when the level is
won.
.SH DIRECTORIES
Tile World uses four different directories for storing external files.
The following list enumerates the directories and describes their
purpose. The default directories that the program uses can be
configured at compile time. The directories can also be changed at
runtime via command-line options and/or environment variables (see
below).
.P
.TP
.B Sets
This directory is used to hold the available level sets. The files
in this directory are either data files or configuration
files. (default for Linux: /usr/local/share/tworld/sets)
.TP
.B Data
This directory is used to hold the data files that are referenced by
configuration files. (default for Linux:
/usr/local/share/tworld/data)
.TP
.B Res
This directory stores the graphics and sound files used by the
program. (default for Linux: /usr/local/share/tworld/res)
.TP
.B Save
This directory is used for saving solution files, and
settings. (default for Linux: ~/.tworld)
.br
.SH ENVIRONMENT VARIABLES
Two environment variables can be used to override the program's
built-in defaults for which directories to use. They are as follows:
.P
.TP
.B TWORLDDIR
Specifies a top-level directory, in which the program will look for
the resource, level set, and data file directories.
.TP
.B TWORLDSAVEDIR
Specifies a directory for saving solution files and settings.
.br
.SH LICENSE
Tile World is copyright (C) 2001-2014 by Brian Raiter, Madhav
Shanbhag, and Eric Schmidt.
.P
This program is free software; you can redistribute it and/or  
modify it under the terms of the GNU General Public License as 
published by the Free Software Foundation; either version 2 of 
the License, or (at your option) any later version.            
.P
This program is distributed in the hope that it will be useful, but
.BR "without any warranty" ;
without even the implied warranty of
.B merchantability
or
.BR "fitness for a particular purpose" .
See the GNU
General Public License for more details.
.P
Please send bug reports to CrapulentCretin@Yahoo.com or eric41293@comcast.net.
.br
.SH HISTORY
"Chip's Challenge" was created by Chuck Sommerville, and was
originally written for the Atari Lynx handheld game console. ("Tile
World" was his working title for the game.) "Chip's Challenge" was
published by Epyx (the company who designed the Lynx before selling
the rights to Atari) in 1989, and was among the first set of games
made available for the Lynx.
.P
"Chip's Challenge" was subsequently ported to several other platforms:
MS-DOS, Microsoft Windows (16-bit), Amiga, ZX Spectrum, Atari ST, and
the Commodore 64. (A NES port was also planned, but never completed.)
.P
The Windows port was different from most (perhaps all?) of the others
in that it was not done by the original team at Epyx. Instead it was
done by Microsoft and sold as part of Windows Entertainment Pack 4
(and later as part of Best of Windows Entertainment Pack). In the
process of recreating the game for the 16-bit Windows platform,
Microsoft introduced a surprising number of changes to the mechanics
of the game. Some were clearly intentional, some were done through
ignorance or indifference, and others were simply bugs in the program.
The programs in WEP4 came pre-installed on many PC computers sold
during the 1990s, which is part of the reason why this particular
version became the most popular. A small but fanatically loyal
community of adherents to the game connected via a MSN chatroom (and
later through the internet). A few members of this community managed
to decipher the format of the MS game's data file, and John K. Elion
subsequently created a freeware level editor, called ChipEdit. As a
result there are now dozens of new level sets, created by fans of the
game and all freely available.
.P
Atari discontinued support for the Lynx in 1994. When Epyx went under,
the rights to their games were purchased by Bridgestone Multimedia.
Responding to the success of "Chip's Challenge", Chuck Sommerville
created a sequel ("Chip's Challenge 2"). The sequel included the
original game as a proper subset, and the company held the rights to
both games. Bridgestone Multimedia, who has now become Alpha Omega
Publications, unfortunately did not see fit to actually release
"Chip's Challenge 2", and by now it is highly unlikely that it ever
will be released. Since Chuck Sommerville no longer has rights to
either game, and Microsoft no longer sells either of the Entertainment
Packs, the original "Chip's Challenge" is no longer available except
by purchasing a used copy of one of the aforementioned Entertainment
Packs (or by downloading an illegal copy).
.P
In 2001, Brain Raiter author began writing "Tile World" with the
intention of recreating a version of the MS game for the Linux
platform. At the encouragement of Chuck Sommerville, this project was
expanded to include the goals of recreating the original Lynx game as
well, and also making the program work under MS Windows in addition to
Linux.
.P
In 2010, Madhav Shanbhag produced "Tile World 2", which had several
new features. In 2014, Eric Schmidt produced version 2.1.
.br
.SH APPENDIX: NOTES ON NOMENCLATURE
"Chip's Challenge" has seen several incarnations. Each had its own
graphical rendering, and thus many of the objects in the game are
known by more than one name. For example, the four types of boots in
the MS version of the game were known as fire boots, flippers (for
water), skates (for ice), and suction boots (for force floors). In the
original Lynx version, however, they were not even boots -- the four
tools were fire shields, water shields, cleats, and magnets,
respectively.
.P
Several of the creatures have seen a variety of names. The list of
creatures given in
.B OVERVIEW OF THE GAME
corresponds to the MS
version of the game. In the original Lynx version, the paramecia were
centipedes instead. In still other versions of the game, gliders were
referred to as ghosts or sharks, fireballs were flames, and teeth were
called frogs. (You will also occasionally see bugs referred to as
bees, and walkers referred to as dumbbells.)
.P
Finally, the thief tile was called a spy in the MS version.
.P
None of this information is needed in order to play the game, but it
helps to explain the titles of some of the user-created levels.
